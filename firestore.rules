rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones de utilidad
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPublished(status) {
      return status == 'published';
    }

    function isValidLandingPage() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['userId', 'status', 'components']) &&
        data.userId is string &&
        data.status in ['draft', 'published'] &&
        data.components is list;
    }

    function isValidLead() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['landingPageId', 'formData', 'metadata']) &&
        data.formData is map &&
        data.metadata.createdAt is timestamp &&
        (!('status' in data) || data.status in ['new', 'contacted', 'qualified', 'converted', 'archived']);
    }

    function isWithinPlanLimits(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let plan = userDoc.data.plan;
      let monthStart = timestamp.date(string(request.time.toDate().year()) + "-" + string(request.time.toDate().month() + 1) + "-01");
      let leadsThisMonth = getAfter(/databases/$(database)/documents/leads, 
        where userId == userId && 
        metadata.createdAt >= monthStart
      ).size();
      
      return plan == 'premium' || leadsThisMonth < 100;
    }

    function isValidCampaign() {
      let data = request.resource.data;
      return 
        data.keys().hasAll(['name', 'description', 'segmentId', 'emailTemplate', 'status']) &&
        data.name is string &&
        data.description is string &&
        data.segmentId is string &&
        data.emailTemplate.subject is string &&
        data.emailTemplate.body is string &&
        data.status in ['draft', 'scheduled', 'sending', 'completed', 'error'];
    }

    // Colección de usuarios
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Colección de landing pages
    match /landing_pages/{pageId} {
      allow read: if true;
      allow create: if isAuthenticated() && isValidLandingPage() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isValidLandingPage() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Colección de leads
    match /leads/{leadId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isValidLead() && isWithinPlanLimits(request.resource.data.userId);
      allow update: if isAuthenticated() && isValidLead() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Colección de campañas
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isValidCampaign();
      allow update: if isAuthenticated() && isValidCampaign() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Colección de analytics
    match /analytics/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow write: if false; // Solo se permite escritura desde el backend
    }

    // Colección de configuraciones de usuario
    match /user_settings/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }
  }
}
